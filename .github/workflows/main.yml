# .github/workflows/main.yml

# Name of the workflow
name: Build and Deploy Nuxt.js Site

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: true
        type: choice
        options:
          - develop
          - staging
          - prod
        default: 'develop'

jobs:
  # This job builds the application and saves it as an artifact
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm' # Use npm for caching

      - name: Install Dependencies
        run: npm ci # Use npm ci for clean installs

      - name: Build Application
        run: npm run generate # Use npm to run the generate script
        env:
          NUXT_DEVTOOLS: ${{ github.event.inputs.environment == 'develop' || github.event.inputs.environment == 'staging' }}
          NUXT_SOURCEMAP: ${{ github.event.inputs.environment != 'prod' }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuxt-build-output
          path: .output/public/
          retention-days: 1

  # This job deploys to the DEVELOPMENT environment
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.environment == 'develop'
    # Use the 'development' GitHub Environment
    environment:
      name: development

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: nuxt-build-output

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3 (Development)
        run: |
          # Note: S3_BUCKET is now pulled from the 'development' environment secrets
          aws s3 sync . s3://${{ vars.S3_BUCKET }} --delete

  # This job deploys to the STAGING environment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.environment == 'staging'
    # Use the 'staging' GitHub Environment
    environment:
      name: staging

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: nuxt-build-output

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3 (Staging)
        run: |
          # Note: S3_BUCKET is now pulled from the 'staging' environment secrets
          aws s3 sync . s3://${{ vars.S3_BUCKET }} --delete

  # This job deploys to the PRODUCTION environment
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.environment == 'prod'
    # Use the 'production' GitHub Environment
    environment:
      name: production

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: nuxt-build-output

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3 (Production)
        run: |
          # Note: S3_BUCKET is now pulled from the 'production' environment secrets
          aws s3 sync . s3://${{ vars.S3_BUCKET }} --delete
