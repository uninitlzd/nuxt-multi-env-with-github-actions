# Name of the workflow
name: Build and Deploy Nuxt.js Site

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: 'The environment to deploy to'
        required: true
        type: choice
        options:
          - develop
          - staging
          - prod
        default: 'develop'

jobs:
  # This job builds the application and saves it as an artifact
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        # The ref will be the branch you select in the UI
        with:
          ref: ${{ github.ref }}

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      # Build the Nuxt.js application with environment-specific settings
      - name: Build Application
        run: pnpm run generate
        env:
          # Enable devtools only for develop and staging environments
          NUXT_DEVTOOLS: ${{ github.event.inputs.environment == 'develop' || github.event.inputs.environment == 'staging' }}
          # Enable sourcemaps for all environments EXCEPT prod
          NUXT_SOURCEMAP: ${{ github.event.inputs.environment != 'prod' }}

      # Upload the build output directory as an artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nuxt-build-output
          path: .output/public/
          retention-days: 1 # Keep artifact for 1 day

  # This job deploys the build artifact to the DEVELOPMENT environment
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build # This job depends on the 'build' job completing successfully
    if: github.event.inputs.environment == 'develop' # Only run if 'develop' was selected

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: nuxt-build-output

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3 (Development)
        run: |
          aws s3 sync . s3://${{ secrets.S3_BUCKET_DEV }} --delete

  # This job deploys the build artifact to the STAGING environment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.environment == 'staging' # Only run if 'staging' was selected

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: nuxt-build-output

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3 (Staging)
        run: |
          aws s3 sync . s3://${{ secrets.S3_BUCKET_STAGING }} --delete

  # This job deploys the build artifact to the PRODUCTION environment
  deploy-prod:
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.environment == 'prod' # Only run if 'prod' was selected

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: nuxt-build-output

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3 (Production)
        run: |
          aws s3 sync . s3://${{ secrets.S3_BUCKET_PROD }} --delete